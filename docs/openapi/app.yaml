openapi: 3.0.3
info:
  title: Helly App API (MVP)
  version: 0.1.0
servers:
  - url: /v1
paths:
  /team-members:
    post:
      summary: Create a team member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMemberCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMember'
    get:
      summary: List team members
      parameters:
        - in: query
          name: search
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMember'
  /team-members/{id}:
    get:
      summary: Get a team member by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMember'
  /feedback:
    post:
      summary: Add feedback (team member derived via AI if not explicit)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
    get:
      summary: List feedback, optionally filtered
      parameters:
        - in: query
          name: memberId
          description: Team member UUID to filter feedback (optional)
          schema:
            type: string
            format: uuid
        - in: query
          name: from
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feedback'
  /ask:
    post:
      summary: Ask about a team member (entity resolved from free text)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text]
              properties:
                text: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AskResponse'
components:
  schemas:
    TeamMemberCreate:
      type: object
      required: [name, role, relationshipToManager, startDate]
      properties:
        name: { type: string }
        role: { type: string }
        relationshipToManager: { type: string }
        startDate: { type: string, format: date }
    TeamMember:
      type: object
      required: [id, name, role, relationshipToManager, startDate]
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        role: { type: string }
        relationshipToManager: { type: string }
        startDate: { type: string, format: date }
    FeedbackCreate:
      type: object
      required: [content]
      properties:
        content: { type: string }
        createdAt: { type: string, format: date-time }
        personHint: { type: string, description: 'Optional hint like a name/email to help resolution' }
    Feedback:
      type: object
      required: [id, teamMemberId, content, createdAt]
      properties:
        id: { type: string, format: uuid }
        teamMemberId: { type: string, format: uuid }
        content: { type: string }
        createdAt: { type: string, format: date-time }
    FeedbackRef:
      type: object
      required: [id, createdAt, snippet]
      properties:
        id: { type: string, format: uuid }
        createdAt: { type: string, format: date-time }
        snippet: { type: string }
    AskResponse:
      type: object
      required: [answer]
      properties:
        answer: { type: string }
        citations:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackRef'

